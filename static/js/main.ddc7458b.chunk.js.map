{"version":3,"sources":["../../src/components/Utils.ts","../../src/components/Row.tsx","../../src/components/Root.tsx","../../src/index.tsx","components/rapidTooltip.ts","components/Boston6DigitRCA.tsx","App.tsx","index.tsx"],"names":["Layout","Category","fadeIn","keyframes","highlightedIdName","GreaterThan1Root","styled","LessThan1Root","LabelText","Cell","TextCell","BarCell","Range","Bar","React","props","d","rowHeight","gridHeight","max","onRowHover","range","layout","highlighted","chartWidth","textWidth","Root","lessThan1","style","height","backgroundColor","undefined","onMouseMove","e","datum","mouseCoords","x","y","clientY","onMouseLeave","id","width","className","transitionDelay","textAlign","Container","ChartContainer","ChartBlock","TitleRoot","ChartOverlayContainer","AxisLines","Grid","AxisValue","AxisText","AxisLine","AxisTitle","CenterLine","CenterLineLabel","BufferRow","Midline","MidlineOverText","MidlineUnderText","ScrollDownText","ScrollDownArrow","data","formatValue","axisLabel","onHighlightError","numberOfXAxisTicks","centerLineValue","centerLineLabel","overMideLineLabel","underMideLineLabel","scrollDownText","useState","setMeasurements","rootRef","useRef","textRef","chartRef","useEffect","chartRect","textRect","updateWindowWidth","window","highlightedElm","rootNode","behavior","orderedData","orderBy","axisIncrement","totalAxisValues","axisFontSize","axisWidth","axisLines","i","value","formatted","key","rows","visibility","borderRight","axisTitle","right","buffer","paddingRight","overflowPadding","paddingLeft","marginLeft","left","ref","gridTemplateRows","gridTemplateColumns","position","top","background","RapidTooltipRoot","div","filteredRCA","RCA_DATA","cityIndustryYearList","filter","rcaNumCompany","Math","ceil","map","min","scale","scaleLog","domain","nice","toString","length","tickMarksForMinMax","parseFloat","invert","toFixed","industry","NAICS_DATA","find","n","naics_id","naicsId","title","name","color","BostonNewYork6Digit","tooltipRef","node","current","innerHTML","input","columnCount","forEach","r","row","c","alignment","boldColumns","includes","getStandardTooltip","rgba","display","setHovered","App","component","Boston6DigitRCA","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddc7458b.chunk.js","sourcesContent":["import {keyframes} from 'styled-components/macro';\n\nexport interface WithDyanmicFont {\n  $dynamicFont: string; // should be value of clamp\n}\n\nexport interface BarDatum {\n  id: string,\n  title: string,\n  value: number,\n  color: string,\n}\n\nexport enum Category {\n  Primary,\n  Secondary,\n}\n\nexport interface RowHoverEvent {\n  datum: BarDatum | undefined;\n  mouseCoords: {x: number, y: number};\n}\n\nexport enum Layout {\n  Left = 'left',\n  Right = 'right',\n}\n\nexport const fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  WithDyanmicFont,\n  BarDatum,\n  RowHoverEvent,\n  Layout,\n  fadeIn,\n} from './Utils';\n\nexport const highlightedIdName = 'react-comparison-bar-chart-highlighted-item';\n\nconst GreaterThan1Root = styled.div`\n  display: flex;\n\n  &:hover {\n    background-color: #f1f1f1;\n  }\n`;\n\nconst LessThan1Root = styled.div`\n  display: flex;\n  background-color: #f1f1f1;\n\n  &:hover {\n    background-color: #fff;\n  }\n`;\n\nconst LabelText = styled.div<WithDyanmicFont>`\n  width: 100%;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  opacity: 0;\n  animation: ${fadeIn} 0.15s linear 1 forwards 0.3s;\n  background-color: #fff;\n`;\n\nexport const Cell = styled.div`\n  transition: height 0.3s ease-in-out;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n`;\n\nconst TextCell = styled(Cell)`\n  background-color: #fff;\n`;\n\nconst BarCell = styled(Cell)`\n  display: flex;\n`;\n\nconst Range = styled.div`\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  border-left: solid 1px #333;\n`;\n\nconst Bar = styled.div`\n  height: 70%;\n  transition: width 0.2s ease-in-out;\n`;\n\ninterface Props {\n  d: BarDatum;\n  rowHeight: number;\n  gridHeight: number;\n  max: number;\n  onRowHover: undefined | ((event: RowHoverEvent) => void);\n  layout: Layout | undefined;\n  highlighted: string | undefined;\n  chartWidth: number;\n  textWidth: number;\n  range: number;\n  lessThan1: boolean;\n}\n\nconst Row = (props: Props) => {\n  const {\n    d, rowHeight, gridHeight,\n    max, onRowHover, range,\n    layout, highlighted, chartWidth, textWidth,\n    lessThan1,\n  } = props;\n\n  const Root = lessThan1 ? LessThan1Root : GreaterThan1Root;\n\n  \n  const style: React.CSSProperties = {\n    height: rowHeight,\n    backgroundColor: highlighted === d.id ? '#f1f1f1' : undefined,\n  };\n  const onMouseMove = (e: React.MouseEvent) => {\n    if (onRowHover) {\n      onRowHover({\n        datum: d,\n        mouseCoords: {\n          x: e.clientX,\n          y: e.clientY,\n        },\n      })\n    }\n  }\n\n  const onMouseLeave = (e: React.MouseEvent) => {\n    if (onRowHover) {\n      onRowHover({\n        datum: undefined,\n        mouseCoords: {\n          x: e.clientX,\n          y: e.clientY,\n        },\n      })\n    }\n  }\n\n  if (layout === Layout.Right) {\n    return (\n      <Root>\n        <BarCell\n          id={highlighted === d.id ? highlightedIdName : undefined}\n          style={{...style, width: chartWidth}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        >\n          <Range style={{width: `${range}%`}}>\n            <Bar\n              className={'react-comparison-bar-chart-bar'}\n              style={{\n                backgroundColor: d.color,\n                width: `${d.value / max * 100}%`,\n                transitionDelay: '0.3s',\n              }}\n            />\n          </Range>\n        </BarCell>\n        <TextCell\n          style={{...style, width: '2rem'}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        />\n        <TextCell\n          style={{...style, width: textWidth}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        >\n          <LabelText\n            className={'react-comparison-bar-chart-row-label'}\n            style={{\n              textAlign: 'left',\n            }}\n            $dynamicFont={`clamp(0.5rem, ${gridHeight * 0.04}px, 0.9rem)`}\n          >\n            {d.title}\n          </LabelText>\n        </TextCell>\n      </Root>\n    );\n  } else {\n    return (\n      <Root>\n        <TextCell\n          style={{...style, width: textWidth}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        >\n          <LabelText\n            className={'react-comparison-bar-chart-row-label'}\n            style={{\n              textAlign: 'right',\n            }}\n            $dynamicFont={`clamp(0.5rem, ${gridHeight * 0.04}px, 0.9rem)`}\n          >\n            {d.title}\n          </LabelText>\n        </TextCell>\n        <TextCell\n          style={{...style, width: '2rem'}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        />\n        <BarCell\n          id={highlighted === d.id ? highlightedIdName : undefined}\n          style={{...style, width: chartWidth}}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseLeave}\n        >\n          <Range style={{width: `${range}%`}}>\n            <Bar\n              className={'react-comparison-bar-chart-bar'}\n              style={{\n                backgroundColor: d.color,\n                width: `${d.value / max * 100}%`,\n                transitionDelay: '0.3s',\n              }}\n            />\n          </Range>\n        </BarCell>\n      </Root>\n    );\n  }\n\n}\n\nexport default React.memo(Row);\n","import React, {useState, useRef, useEffect} from 'react';\nimport styled from 'styled-components/macro';\nimport orderBy from 'lodash/orderBy';\nimport Row, {Cell, highlightedIdName} from './Row';\nimport {\n  WithDyanmicFont,\n  BarDatum,\n  RowHoverEvent,\n  Layout,\n} from './Utils';\n\nconst overflowPadding = 1; // in rem. Needed to allow for final axis value to remain visible\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  padding-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  box-sizing: border-box;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst ChartContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  /* makes this element the relative parent for position: fixed children */\n  will-change: transform;\n`;\n\nconst ChartBlock = styled.div`\n  grid-column: 1 / -1;\n  width: 100%;\n`;\n\nconst TitleRoot = styled.div<WithDyanmicFont>`\n  margin-left: auto;\n  display: flex;\n  position: absolute;\n  top: 1px;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n`;\n\nconst ChartOverlayContainer = styled.div`\n  pointer-events: none;\n  margin-left: auto;\n  display: flex;\n  position: absolute;\n  top: 1px;\n`;\n\nconst AxisLines = styled.div`\n  position: absolute;\n  width: 100%;\n  display: flex;\n\n  /* makes this element the relative parent for position: fixed children */\n  will-change: transform;\n`;\n\nconst Grid = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-row: 1;\n  display: grid;\n  position: relative;\n  /* both auto and overlay required for browsers that don't support overlay */\n  overflow: auto;\n  overflow-y: overlay;\n  overflow-x: hidden\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n`;\n\nconst AxisValue = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  background-color: #fff;\n  position: relative;\n  pointer-events: none;\n\n\n  &:after {\n    content: '';\n    width: 100%;\n    height: 0;\n    position: absolute;\n    bottom: 0;\n  }\n\n  &:not(:last-child) {\n    &:after {\n      border-bottom: solid 2px #333;\n      z-index: 10;\n    }\n  }\n\n  :last-child {\n    &:after {\n      border-bottom: solid 2px transparent;\n    }\n  }\n`;\n\nconst AxisText = styled.span<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  transform: translate(-50%, calc(100% + 4px));\n  position: absolute;\n  bottom: 0;\n`;\n\nconst AxisLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 0;\n  border-left: solid 1px #dfdfdf;\n`;\n\nconst AxisTitle = styled.div<WithDyanmicFont>`\n  position: absolute;\n  bottom: 0;\n  z-index: 1;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  padding: 0 0 0.3rem 1rem;\n  box-sizing: border-box;\n  pointer-events: none;\n  transform: translate(-1rem, 0);\n`;\n\nconst CenterLine = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  width: 0;\n  height: 100%;\n  border-left: dashed 2px #333;\n`;\n\nconst CenterLineLabel = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  white-space: nowrap;\n  padding-left: 0.7rem;\n  text-shadow:\n       1px 1px 0 #fff,\n     -1px -1px 0 #fff,  \n      1px -1px 0 #fff,\n      -1px 1px 0 #fff,\n       1px 1px 0 #fff;\n`;\n\nconst BufferRow = styled.div`\n  z-index: 100;\n  display: flex;\n  align-items: flex-end;\n`;\n\nconst Midline = styled.div`\n  border-top: dashed 2px #333;\n  width: 100%;\n  position: absolute;\n  background-color: #f1f1f1;\n  z-index: -1;\n  transform: translateY(1px);\n`;\n\nconst MidlineOverText = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: 1rem;\n  top: -0.25rem;\n  transform: translateY(-100%);\n`;\nconst MidlineUnderText = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: 1rem;\n  bottom: 0;\n`;\n\nconst ScrollDownText = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: 0.25rem;\n  top: 50%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  max-width: 180px;\n  pointer-events: none;\n  text-shadow:\n     1px 1px 0 #fff,\n   -1px -1px 0 #fff,  \n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n     1px 1px 0 #fff;\n`;\nconst ScrollDownArrow = styled.div`\n  margin-right: 0.75rem;\n  font-size: 1rem;\n`;\n\nexport interface Props {\n  data: BarDatum[];\n  formatValue?: (value: number) => string | number;\n  axisLabel?: React.ReactElement<any> | string | undefined | null;\n  onRowHover?: (event: RowHoverEvent) => void;\n  layout?: Layout;\n  highlighted?: string;\n  onHighlightError?: (value: string) => void;\n  numberOfXAxisTicks?: number;\n  centerLineValue: number;\n  centerLineLabel: string;\n  overMideLineLabel: string;\n  underMideLineLabel: string;\n  scrollDownText: string;\n}\n\ninterface Measurements {\n  gridHeight: number,\n  chartWidth: number,\n  textWidth: number,\n}\n\nconst Root = (props: Props) => {\n  const {\n    data, formatValue,\n    axisLabel, onRowHover, layout, highlighted,\n    onHighlightError,\n    numberOfXAxisTicks,\n    centerLineValue,\n    centerLineLabel,\n    overMideLineLabel,\n    underMideLineLabel,\n    scrollDownText,\n  } = props;\n\n  if (!data.length) {\n    return null;\n  }\n\n  const [{gridHeight, chartWidth, textWidth}, setMeasurements] = useState<Measurements>({\n    gridHeight: 0, chartWidth: 0, textWidth: 0\n  });\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const textRef = useRef<HTMLDivElement | null>(null);\n  const chartRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (rootRef && rootRef.current && chartRef && chartRef.current && textRef && textRef.current) {\n      const chartRect = chartRef.current.getBoundingClientRect();\n      const textRect = textRef.current.getBoundingClientRect();\n      setMeasurements({\n        gridHeight: rootRef.current.offsetHeight, chartWidth: chartRect.width, textWidth: textRect.width,\n      });\n    }\n  }, [rootRef, chartRef])\n\n  useEffect(() => {\n    const updateWindowWidth = () => {\n      if (rootRef && rootRef.current && chartRef && chartRef.current && textRef && textRef.current) {\n        const chartRect = chartRef.current.getBoundingClientRect();\n        const textRect = textRef.current.getBoundingClientRect();\n        setMeasurements({\n          gridHeight: rootRef.current.offsetHeight, chartWidth: chartRect.width, textWidth: textRect.width,\n        });\n      }\n    };\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (rootRef && rootRef.current && highlighted !== undefined) {\n      const rootNode = rootRef.current;\n      const highlightedElm: HTMLElement | null = rootNode.querySelector(`#${highlightedIdName}`);\n      if (highlightedElm) {\n        highlightedElm.scrollIntoView({behavior: \"smooth\"});\n      } else if (onHighlightError) {\n        onHighlightError(highlighted);\n      }\n    }\n  }, [rootRef, highlighted]);\n\n  const orderedData = orderBy(data, ['value'], 'desc');\n\n  const maxValue = 100;\n\n  const totalTopValues = 20;\n  const rowHeight = gridHeight ? ((1 / totalTopValues) * gridHeight) : 0;\n\n  const axisIncrement = numberOfXAxisTicks ? maxValue / numberOfXAxisTicks : 25;\n\n  const totalAxisValues = maxValue / axisIncrement;\n\n  let axisFontSize: string;\n  if (chartWidth < gridHeight) {\n    axisFontSize = `clamp(0.55rem, ${chartWidth * 0.025}px, 1rem)`;\n  } else {\n    axisFontSize = `clamp(0.55rem, ${gridHeight * 0.025}px, 1rem)`;\n  }\n  const axisWidth = chartWidth / totalAxisValues;\n\n  const axisLines: React.ReactElement<any>[] = [];\n\n  for (let i = 0; i < totalAxisValues + 1; i++) {\n    const value = axisIncrement * i;\n    if (value <= maxValue) {\n      const formatted = formatValue ? formatValue(value) : value;\n      axisLines.push(\n        <AxisValue\n          key={'axis-line-right-' + i}\n          style={{width: axisWidth}}\n          className={'react-comparison-bar-chart-axis-value'}\n        >\n          <AxisText\n            $dynamicFont={axisFontSize}\n          >\n            {formatted}\n          </AxisText>\n          <AxisLine />\n        </AxisValue>\n      );\n    }\n  }\n\n  const rows: React.ReactElement<any>[] = [];\n  orderedData.forEach((d, i) => {\n    rows.push(\n      <Row\n        key={d.id}\n        d={d}\n        rowHeight={rowHeight}\n        gridHeight={gridHeight}\n        max={maxValue}\n        onRowHover={onRowHover}\n        range={maxValue}\n        layout={layout}\n        highlighted={highlighted}\n        textWidth={textWidth}\n        chartWidth={chartWidth}\n        lessThan1={d.value < centerLineValue}\n      />\n    );\n    if (d.value >= centerLineValue && orderedData[i + 1].value < centerLineValue) {\n      rows.push(\n        <BufferRow style={{height: rowHeight, visibility: chartWidth ? undefined : 'hidden'}}>\n          <Midline style={{height: rowHeight / 2}}>\n            <Cell\n              style={{\n                height: rowHeight,\n                width: `calc(${textWidth}px + 2rem)`,\n                backgroundColor: '#fff',\n              }}\n            />\n            <MidlineOverText\n              $dynamicFont={`clamp(0.75rem, ${chartWidth * 0.025}px, 1rem)`}\n            >\n              {overMideLineLabel} ↑\n            </MidlineOverText>\n            <MidlineUnderText\n              $dynamicFont={`clamp(0.75rem, ${chartWidth * 0.025}px, 1rem)`}\n            >\n              {underMideLineLabel} ↓\n            </MidlineUnderText>\n          </Midline>\n          <Cell\n            style={{\n              height: rowHeight,\n              width: `calc(${textWidth}px + 2rem)`,\n              borderRight: 'solid 1px #333',\n            }}\n          />\n        </BufferRow>\n      );\n    }\n  })\n\n  if (layout === Layout.Right) {\n    rows.reverse();\n  }\n\n  const axisTitle = axisLabel ? (\n    <AxisTitle\n      style={{\n        width: chartWidth,\n        right: layout !== Layout.Right ? 0 : undefined,\n        textAlign: layout !== Layout.Right ? 'right' : undefined,\n      }}\n      className={'react-comparison-bar-chart-axis-title'}\n      $dynamicFont={`clamp(0.75rem, ${chartWidth * 0.025}px, 1.1rem)`}\n    >\n      {axisLabel}\n    </AxisTitle>\n  ) : null;\n\n\n  const buffer: React.CSSProperties = layout !== Layout.Right\n    ? {paddingRight: overflowPadding + 'rem'} : {paddingLeft: overflowPadding + 'rem'};\n\n  return (\n    <Container\n      style={{...buffer}}\n      className={'react-comparison-bar-chart-root-container'}\n    >\n      <TitleRoot\n        style={{\n          width: chartWidth,\n          visibility: chartWidth ? undefined : 'hidden',\n          marginLeft: layout !== Layout.Right ? undefined : 0,\n          right: layout !== Layout.Right ? 0 : undefined,\n          left: layout !== Layout.Right ? undefined : 0,\n          ...buffer,\n        }}\n        $dynamicFont={`clamp(0.65rem, ${chartWidth * 0.023}px, 0.87rem)`}\n      >\n        <AxisLines style={{height: gridHeight}}>\n          {axisLines}\n        </AxisLines>\n      </TitleRoot>\n      <ChartContainer>\n        <Grid\n          ref={rootRef}\n          style={{\n            gridTemplateRows: 'repeat(${totalValues}, auto)',\n            gridTemplateColumns: layout !== Layout.Right\n              ? 'clamp(75px, 300px, 15%) 2rem 1fr'\n              : '1fr 2rem clamp(75px, 300px, 15%)',\n          }}\n          className={'react-comparison-bar-chart-grid'}\n        >\n          <Cell\n            ref={layout !== Layout.Right ? textRef : chartRef}\n          />\n          <Cell />\n          <Cell\n            ref={layout !== Layout.Right ? chartRef : textRef}\n          />\n          <ChartBlock>\n            <BufferRow style={{height: rowHeight, position: 'sticky', top: '0', background: '#fff'}} />\n            {rows}\n          </ChartBlock>\n          <ScrollDownText\n            style={{visibility: chartWidth ? undefined : 'hidden',}}\n            $dynamicFont={`clamp(0.65rem, ${chartWidth * 0.023}px, 0.87rem)`}\n          >\n            <ScrollDownArrow>↓</ScrollDownArrow>\n            {scrollDownText}\n          </ScrollDownText>\n        </Grid>\n      </ChartContainer>\n\n      <ChartOverlayContainer\n        style={{\n          width: chartWidth,\n          visibility: chartWidth ? undefined : 'hidden',\n          marginLeft: layout !== Layout.Right ? undefined : 0,\n          right: layout !== Layout.Right ? 0 : undefined,\n          left: layout !== Layout.Right ? undefined : 0,\n          ...buffer,\n        }}\n      >\n        <AxisLines style={{height: gridHeight, width: chartWidth}}>\n          {axisTitle}\n          <CenterLine style={{left: centerLineValue + '%'}}>\n            <CenterLineLabel\n              $dynamicFont={`clamp(0.75rem, ${chartWidth * 0.025}px, 1.1rem)`}\n              className={'react-comparison-bar-chart-axis-title'}\n            >\n              {centerLineLabel}\n            </CenterLineLabel>\n          </CenterLine>\n        </AxisLines>\n      </ChartOverlayContainer>\n    </Container>\n  );\n}\n\nexport default Root;\n","import React from 'react'\nimport Root, {\n  Props as VerticalBarChartProps,\n} from './components/Root';\nimport {\n  BarDatum,\n  RowHoverEvent,\n  Layout,\n} from './components/Utils';\n\nconst VerticalBarChart = (props: VerticalBarChartProps) => {\n  return (\n    <Root {...props} />\n  );\n}\n\nexport {\n  VerticalBarChartProps,\n  BarDatum,\n  RowHoverEvent,\n  Layout,\n}\n\nexport default VerticalBarChart;\n","import styled from 'styled-components/macro';\n\ninterface Input {\n  title: string;\n  color: string;\n  rows: string[][];\n  boldColumns?: number[];\n}\n\nexport const RapidTooltipRoot = styled.div`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  transition: opacity 0.15s ease;\n  color: #333;\n  background-color: #fff;\n  border: 1px solid #dfdfdf;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n  transform: translate(-50%, calc(-100% - 1.5rem));\n  display: none;\n`;\n\nexport const getStandardTooltip = (input: Input) => {\n  const columnCount = input.rows.length && input.rows[0].length ? input.rows[0].length : 1;\n\n  let rows: string = '';\n  input.rows.forEach(r => {\n    let row = '';\n    r.forEach((c, i) => {\n      const alignment = i === 0\n        ? 'justify-content: flex-start; text-align: left;'\n        : 'justify-content: flex-end; text-align: right;';\n      const style = input.boldColumns && input.boldColumns.includes(i)\n        ? `style=\"font-weight: 600;${alignment}\"` : '';\n      row = row + `<div class=\"rapid-tooltip-cell\" ${style}>${c}</div>`;\n    });\n    rows = rows + row;\n  });\n\n  return `\n    <div>\n      <div class=\"rapid-tooltip-title\" style=\"background-color: ${input.color};\">\n        ${input.title}\n      </div>\n      <div\n        class=\"rapid-tooltip-subsection-grid\"\n        style=\"display: grid; grid-template-columns: repeat(${columnCount}, auto);\"\n      >\n        ${rows}\n      </div>\n    </div>\n    <div class=\"rapid-tooltip-arrow-container\">\n      <div class=\"rapid-tooltip-arrow\"></div>\n    </div>\n  `;\n};","import React, {useRef} from 'react';\nimport ComparisonBarChart, {\n  BarDatum,\n  RowHoverEvent,\n} from 'react-vertical-bar-chart';\nimport styled from 'styled-components/macro';\nimport {rgba} from 'polished';\nimport {RapidTooltipRoot, getStandardTooltip} from './rapidTooltip';\nimport RCA_DATA from '../data/boston-6-digit-rca.json';\nimport NAICS_DATA from '../data/naics_2017.json';\nimport {scaleLog} from 'd3-scale';\n\nconst tickMarksForMinMax = (min: number, max: number) => {\n  const digits = min.toString().length + max.toString().length;\n  return digits - 3;\n}\n\nconst filteredRCA = RCA_DATA.data.cityIndustryYearList.filter(d => d.rcaNumCompany && d.rcaNumCompany > 0);\nconst max = Math.ceil((Math.max(...filteredRCA.map(d => d.rcaNumCompany as number)) * 1.1) / 10) * 10;\nconst min = Math.min(...filteredRCA.map(d => d.rcaNumCompany as number));\nconst scale = scaleLog()\n  .domain([min, max])\n  .range([ 0, 100 ])\n  .nice();\nconst numberOfXAxisTicks = tickMarksForMinMax(\n  parseFloat(scale.invert(0).toFixed(5)),\n  parseFloat(scale.invert(100).toFixed(5))\n);\n\nconst data: BarDatum[] = filteredRCA.map(d => {\n  const industry = NAICS_DATA.find(n => n.naics_id.toString() === d.naicsId);\n  return {\n    id: d.naicsId,\n    title: industry ? industry.name : '',\n    value: scale(d.rcaNumCompany) as number,\n    color: 'gray',\n  }\n});\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n  box-sizing: border-box;\n  padding: 3rem;\n\n  @media (max-width: 720px) {\n    padding: 0.75rem;\n  }\n`;\n\nconst formatValue = (value: number) => {\n  const scaledValue = parseFloat(scale.invert(value).toFixed(4));\n  // const scaledValue = parseFloat(scale.invert(value).toFixed(2));\n  return scaledValue;\n  // return nearestPowerOf2(scaledValue);\n}\n\nconst BostonNewYork6Digit = () => {\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  const setHovered = (e: RowHoverEvent | undefined) => {\n    const node = tooltipRef.current;\n    if (node) {\n      if (e && e.datum) {\n        const {datum, mouseCoords} = e;\n        node.innerHTML = getStandardTooltip({\n          title: datum.title,\n          color: rgba(datum.color, 0.3),\n          rows: [\n            ['RCA', scale.invert(datum.value).toFixed(3)],\n          ],\n          boldColumns: [1, 2],\n        });\n        node.style.top = mouseCoords.y + 'px';\n        node.style.left = mouseCoords.x + 'px';\n        node.style.display = 'block';\n      } else {\n        node.style.display = 'none';\n      }\n    }\n  };\n\n  return (\n    <Root>\n      <ComparisonBarChart\n        data={data}\n        formatValue={formatValue}\n        axisLabel={'Specialization'}\n        onRowHover={e => setHovered(e)}\n        numberOfXAxisTicks={numberOfXAxisTicks}\n        centerLineValue={scale(1) as number}\n        centerLineLabel={'Expected Specialization'}\n        overMideLineLabel={'Over Specialized'}\n        underMideLineLabel={'Under Specialized'}\n        scrollDownText={'Scroll down to see under specialization'}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n    </Root>\n  )\n}\n\nexport default BostonNewYork6Digit;\n","import React from 'react';\nimport Boston6DigitRCA from './components/Boston6DigitRCA';\nimport {\n  Route,\n  Switch,\n  HashRouter,\n} from 'react-router-dom';\n\nconst App = () => {\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route component={Boston6DigitRCA} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}