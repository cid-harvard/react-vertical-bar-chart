{"version":3,"sources":["../../src/components/Utils.ts","../../src/components/Row.tsx","../../src/components/Root.tsx","../../src/index.tsx","components/rapidTooltip.ts","components/Boston6DigitRCA.tsx","App.tsx","index.tsx"],"names":["Category","fadeIn","keyframes","GreaterThan1Root","styled","LessThan1Root","LabelText","Cell","TextCell","BarCell","Range","Bar","React","props","d","rowHeight","gridHeight","max","onRowHover","highlighted","chartWidth","textWidth","lessThan1","centerLineValue","Root","style","height","backgroundColor","undefined","onMouseMove","e","datum","mouseCoords","x","y","clientY","onMouseLeave","percent","bar","className","width","transition","transitionDelay","textAlign","id","Container","ChartContainer","ChartBlock","TitleRoot","ChartOverlayContainer","AxisLines","Grid","AxisValue","AxisText","AxisLine","AxisTitle","CenterLine","CenterLineLabel","CenterLineBackground","BufferRow","Midline","MidlineOverText","MidlineUnderText","ScrollDownText","ScrollDownArrow","data","formatValue","axisLabel","onHighlightError","numberOfXAxisTicks","centerLineLabel","overMideLineLabel","underMideLineLabel","scrollDownText","useState","chartHeight","scrollWidth","setMeasurements","rootRef","useRef","textRef","chartRef","useEffect","chartRect","textRect","updateWindowWidth","window","highlightedElm","rootNode","behavior","block","orderedData","orderBy","totalTopValues","axisIncrement","totalAxisValues","axisFontSize","axisWidth","axisLines","i","value","formatted","key","rows","midlineFontSize","visibility","borderRight","remainingSpace","title","color","axisTitle","right","buffer","paddingRight","overflowPadding","marginRight","scrollDown","marginLeft","left","ref","gridTemplateRows","gridTemplateColumns","position","top","background","RapidTooltipRoot","div","filteredRCA","RCA_DATA","cityIndustryYearList","filter","rcaNumCompany","Math","ceil","map","min","scale","scaleLog","domain","range","nice","parseFloat","invert","toFixed","toString","length","tickMarksForMinMax","industry","NAICS_DATA","find","n","naics_id","naicsId","name","decimalToFraction","decimal","replace","bottom","pow","floor","gcd","a","b","display","scaledValue","BostonNewYork6Digit","tooltipRef","setHighlighted","onClick","c","node","current","innerHTML","input","columnCount","forEach","r","row","alignment","boldColumns","includes","getStandardTooltip","rgba","setHovered","App","component","Boston6DigitRCA","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c46b6943.chunk.js","sourcesContent":["import {keyframes} from 'styled-components/macro';\n\nexport interface WithDyanmicFont {\n  $dynamicFont: string; // should be value of clamp\n}\n\nexport interface BarDatum {\n  id: string,\n  title: string,\n  value: number,\n  color: string,\n}\n\nexport enum Category {\n  Primary,\n  Secondary,\n}\n\nexport interface RowHoverEvent {\n  datum: BarDatum | undefined;\n  mouseCoords: {x: number, y: number};\n}\n\n\nexport const fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  WithDyanmicFont,\n  BarDatum,\n  RowHoverEvent,\n  fadeIn,\n} from './Utils';\n\nexport const highlightedIdName = 'react-comparison-bar-chart-highlighted-item';\n\nconst GreaterThan1Root = styled.div`\n  display: flex;\n\n  &:hover {\n    background-color: #f1f1f1;\n  }\n`;\n\nconst LessThan1Root = styled.div`\n  display: flex;\n  background-color: #f1f1f1;\n\n  &:hover {\n    background-color: #fff;\n  }\n`;\n\nconst LabelText = styled.div<WithDyanmicFont>`\n  width: 100%;\n  font-size: 0.65rem;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  opacity: 0;\n  animation: ${fadeIn} 0.15s linear 1 forwards 0.3s;\n  background-color: #fff;\n`;\n\nexport const Cell = styled.div`\n  transition: height 0.3s ease-in-out;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n`;\n\nconst TextCell = styled(Cell)`\n  background-color: #fff;\n`;\n\nconst BarCell = styled(Cell)`\n  display: flex;\n`;\n\nconst Range = styled.div`\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  border-left: solid 1px #333;\n`;\n\nconst Bar = styled.div`\n  height: 70%;\n  transition: width 0.2s ease-in-out;\n`;\n\ninterface Props {\n  d: BarDatum;\n  rowHeight: number;\n  gridHeight: number;\n  max: number;\n  onRowHover: undefined | ((event: RowHoverEvent) => void);\n  highlighted: string | undefined;\n  chartWidth: number;\n  textWidth: number;\n  centerLineValue: number;\n  lessThan1: boolean;\n}\n\nconst Row = (props: Props) => {\n  const {\n    d, rowHeight, gridHeight,\n    max, onRowHover,\n    highlighted, chartWidth, textWidth,\n    lessThan1,\n    centerLineValue,\n  } = props;\n\n  const Root = lessThan1 ? LessThan1Root : GreaterThan1Root;\n\n  \n  const style: React.CSSProperties = {\n    height: rowHeight,\n    backgroundColor: highlighted === d.id\n      ? lessThan1 ? '#fff' : '#f1f1f1'\n      : undefined,\n  };\n  const onMouseMove = (e: React.MouseEvent) => {\n    if (onRowHover) {\n      onRowHover({\n        datum: d,\n        mouseCoords: {\n          x: e.clientX,\n          y: e.clientY,\n        },\n      })\n    }\n  }\n\n  const onMouseLeave = (e: React.MouseEvent) => {\n    if (onRowHover) {\n      onRowHover({\n        datum: undefined,\n        mouseCoords: {\n          x: e.clientX,\n          y: e.clientY,\n        },\n      })\n    }\n  }\n\n  const percent = d.value / max * 100;\n  let bar: React.ReactElement<any> | null;\n  if (percent > centerLineValue) {\n    bar = (\n      <React.Fragment>\n        <Bar\n          className={'react-comparison-bar-chart-bar'}\n          style={{\n            backgroundColor: 'transparent',\n            width: `${centerLineValue}%`,\n            transition: 'none',\n          }}\n        />\n        <Bar\n          className={'react-comparison-bar-chart-bar'}\n          style={{\n            backgroundColor: d.color,\n            width: `${percent - centerLineValue}%`,\n            transitionDelay: '0.3s',\n          }}\n        />\n      </React.Fragment>\n    );\n  } else if (percent < centerLineValue) {\n    bar = (\n      <React.Fragment>\n        <Bar\n          className={'react-comparison-bar-chart-bar'}\n          style={{\n            backgroundColor: 'transparent',\n            width: `${percent}%`,\n            transition: 'none',\n          }}\n        />\n        <Bar\n          className={'react-comparison-bar-chart-bar'}\n          style={{\n            backgroundColor: d.color,\n            width: `${centerLineValue - percent}%`,\n            transitionDelay: '0.3s',\n          }}\n        />\n      </React.Fragment>\n    );\n  } else {\n    bar = null;\n  }\n  return (\n    <Root>\n      <TextCell\n        style={{...style, width: textWidth}}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n      >\n        <LabelText\n          className={'react-comparison-bar-chart-row-label'}\n          style={{\n            textAlign: 'left',\n          }}\n          $dynamicFont={`clamp(0.5rem, ${gridHeight * 0.04}px, 0.9rem)`}\n        >\n          {d.title}\n        </LabelText>\n      </TextCell>\n      <TextCell\n        style={{...style, width: '0.75rem'}}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n      />\n      <BarCell\n        id={highlighted === d.id ? highlightedIdName : undefined}\n        style={{...style, width: chartWidth}}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n      >\n        <Range style={{width: `${max}%`}}>\n          {bar}\n        </Range>\n      </BarCell>\n    </Root>\n  );\n\n}\n\nexport default React.memo(Row);\n","import React, {useState, useRef, useEffect} from 'react';\nimport styled from 'styled-components/macro';\nimport orderBy from 'lodash/orderBy';\nimport Row, {Cell, highlightedIdName} from './Row';\nimport {\n  WithDyanmicFont,\n  BarDatum,\n  RowHoverEvent,\n} from './Utils';\n\nconst overflowPadding = 1; // in rem. Needed to allow for final axis value to remain visible\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  padding-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  box-sizing: border-box;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst ChartContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  /* makes this element the relative parent for position: fixed children */\n  transform: translate(0px);\n  will-change: transform;\n`;\n\nconst ChartBlock = styled.div`\n  grid-column: 1 / -1;\n  width: 100%;\n`;\n\nconst TitleRoot = styled.div<WithDyanmicFont>`\n  margin-left: auto;\n  display: flex;\n  position: absolute;\n  top: 1px;\n  font-size: 0.65rem;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n`;\n\nconst ChartOverlayContainer = styled.div`\n  pointer-events: none;\n  margin-left: auto;\n  display: flex;\n  position: absolute;\n  top: 1px;\n`;\n\nconst AxisLines = styled.div`\n  position: absolute;\n  width: 100%;\n  display: flex;\n\n  /* makes this element the relative parent for position: fixed children */\n  transform: translate(0px);\n  will-change: transform;\n`;\n\nconst Grid = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-row: 1;\n  display: grid;\n  grid-template-columns: 120px 0.75rem 1fr;\n  position: relative;\n  /* both auto and overlay required for browsers that don't support overlay */\n  overflow: auto;\n  overflow-y: scroll;\n  overflow-x: hidden;\n`;\n\nconst AxisValue = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  background-color: #fff;\n  position: relative;\n  pointer-events: none;\n\n\n  &:after {\n    content: '';\n    width: 100%;\n    height: 0;\n    position: absolute;\n    bottom: 0;\n  }\n\n  &:not(:last-child) {\n    &:after {\n      border-bottom: solid 2px #333;\n      z-index: 10;\n    }\n  }\n\n  :last-child {\n    &:after {\n      border-bottom: solid 2px transparent;\n    }\n  }\n`;\n\nconst AxisText = styled.span<WithDyanmicFont>`\n  font-size: 0.55rem;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  transform: translate(-50%, calc(100% + 4px));\n  position: absolute;\n  bottom: 0;\n`;\n\nconst AxisLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 0;\n  border-left: solid 1px #dfdfdf;\n`;\n\nconst AxisTitle = styled.div`\n  position: absolute;\n  bottom: 0;\n  z-index: 1;\n  padding: 0 0 0.3rem 1rem;\n  box-sizing: border-box;\n  pointer-events: none;\n  transform: translate(-1rem, 0);\n  font-weight: 600;\n  font-size: 0.75rem;\n  color: #333;\n  text-transform: uppercase;\n\n  @media (max-height: 600px) {\n    font-size: 0.65rem;\n  }\n`;\n\nconst CenterLine = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  width: 0;\n  height: 100%;\n  border-left: dashed 2px #333;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n`;\n\nconst CenterLineLabel = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  white-space: nowrap;\n  padding-left: 0.7rem;\n  font-size: 0.5rem;\n`;\n\nconst CenterLineBackground = styled.div`\n  background-color: #fff;\n  padding: 0.1rem;\n`;\n\nconst BufferRow = styled.div`\n  z-index: 100;\n  display: flex;\n  align-items: flex-end;\n`;\n\nconst Midline = styled.div`\n  border-top: dashed 2px #333;\n  width: 100%;\n  position: absolute;\n  background-color: #f1f1f1;\n  z-index: -1;\n  transform: translateY(1px);\n  font-size: 0.75rem;\n`;\n\nconst MidlineOverText = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: 1rem;\n  top: -0.25rem;\n  transform: translateY(-100%);\n  z-index: 100;\n`;\nconst MidlineUnderText = styled.div<WithDyanmicFont>`\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: 1rem;\n  bottom: 0;\n`;\n\nconst ScrollDownText = styled.div<WithDyanmicFont>`\n  font-size: 0.65rem;\n  font-size: ${({$dynamicFont}) => $dynamicFont};\n  position: absolute;\n  right: calc(0.25rem + 12px);\n  top: 50%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  max-width: 150px;\n  pointer-events: none;\n  text-shadow:\n     1px 1px 0 #fff,\n   -1px -1px 0 #fff,  \n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n     1px 1px 0 #fff;\n`;\nconst ScrollDownArrow = styled.div`\n  margin-right: 0.75rem;\n  font-size: 1rem;\n`;\n\nexport interface Props {\n  data: BarDatum[];\n  formatValue?: (value: number) => string | number | React.ReactElement;\n  axisLabel?: React.ReactElement<any> | string | undefined | null;\n  onRowHover?: (event: RowHoverEvent) => void;\n  highlighted?: string;\n  onHighlightError?: (value: string) => void;\n  numberOfXAxisTicks?: number;\n  centerLineValue: number;\n  centerLineLabel: string;\n  overMideLineLabel: string;\n  underMideLineLabel: string;\n  scrollDownText: string;\n}\n\ninterface Measurements {\n  gridHeight: number,\n  chartWidth: number,\n  chartHeight: number,\n  textWidth: number,\n  scrollWidth: number,\n}\n\nconst Root = (props: Props) => {\n  const {\n    data, formatValue,\n    axisLabel, onRowHover, highlighted,\n    onHighlightError,\n    numberOfXAxisTicks,\n    centerLineValue,\n    centerLineLabel,\n    overMideLineLabel,\n    underMideLineLabel,\n    scrollDownText,\n  } = props;\n\n  if (!data.length) {\n    return null;\n  }\n\n  const [{gridHeight, chartWidth, chartHeight, textWidth, scrollWidth}, setMeasurements] = useState<Measurements>({\n    gridHeight: 0, chartWidth: 0, chartHeight: 0, textWidth: 0, scrollWidth: 0,\n  });\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const textRef = useRef<HTMLDivElement | null>(null);\n  const chartRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (rootRef && rootRef.current && chartRef && chartRef.current && textRef && textRef.current) {\n      const chartRect = chartRef.current.getBoundingClientRect();\n      const textRect = textRef.current.getBoundingClientRect();\n      const scrollWidth = rootRef.current.offsetWidth - rootRef.current.clientWidth;\n      setMeasurements({\n        gridHeight: rootRef.current.offsetHeight,\n        chartWidth: chartRect.width,\n        chartHeight: chartRect.height,\n        textWidth: textRect.width,\n        scrollWidth,\n      });\n    }\n  }, [rootRef, chartRef])\n\n  useEffect(() => {\n    const updateWindowWidth = () => {\n      if (rootRef && rootRef.current && chartRef && chartRef.current && textRef && textRef.current) {\n        const chartRect = chartRef.current.getBoundingClientRect();\n        const textRect = textRef.current.getBoundingClientRect();\n        const scrollWidth = rootRef.current.offsetWidth - rootRef.current.clientWidth;\n        setMeasurements({\n          gridHeight: rootRef.current.offsetHeight,\n          chartWidth: chartRect.width,\n          chartHeight: chartRect.height,\n          textWidth: textRect.width,\n          scrollWidth,\n        });\n      }\n    };\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (rootRef && rootRef.current && highlighted !== undefined) {\n      const rootNode = rootRef.current;\n      const highlightedElm: HTMLElement | null = rootNode.querySelector(`#${highlightedIdName}`);\n      if (highlightedElm) {\n        highlightedElm.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n      } else if (onHighlightError) {\n        onHighlightError(highlighted);\n      }\n    }\n  }, [rootRef, highlighted]);\n\n  const orderedData = orderBy(data, ['value'], 'desc');\n\n  const maxValue = 100;\n\n  const totalTopValues = gridHeight < 500 ? 10 : 20;\n  const rowHeight = gridHeight ? ((1 / totalTopValues) * gridHeight) : 0;\n\n  const axisIncrement = numberOfXAxisTicks ? maxValue / numberOfXAxisTicks : 25;\n\n  const totalAxisValues = maxValue / axisIncrement;\n\n  let axisFontSize: string;\n  if (chartWidth < gridHeight) {\n    axisFontSize = `clamp(0.55rem, ${chartWidth * 0.025}px, 0.7rem)`;\n  } else {\n    axisFontSize = `clamp(0.55rem, ${gridHeight * 0.025}px, 0.7rem)`;\n  }\n  const axisWidth = chartWidth / totalAxisValues;\n\n  const axisLines: React.ReactElement<any>[] = [];\n\n  for (let i = 0; i < totalAxisValues + 1; i++) {\n    const value = axisIncrement * i;\n    if (value <= maxValue) {\n      const formatted = formatValue ? formatValue(value) : value;\n      axisLines.push(\n        <AxisValue\n          key={'axis-line-right-' + i}\n          style={{width: axisWidth}}\n          className={'react-comparison-bar-chart-axis-value'}\n        >\n          <AxisText\n            $dynamicFont={axisFontSize}\n          >\n            {formatted}\n          </AxisText>\n          <AxisLine />\n        </AxisValue>\n      );\n    }\n  }\n\n  const rows: React.ReactElement<any>[] = [];\n  orderedData.forEach((d, i) => {\n    rows.push(\n      <Row\n        key={d.id}\n        d={d}\n        rowHeight={rowHeight}\n        gridHeight={gridHeight}\n        max={maxValue}\n        onRowHover={onRowHover}\n        highlighted={highlighted}\n        textWidth={textWidth}\n        chartWidth={chartWidth}\n        centerLineValue={centerLineValue}\n        lessThan1={d.value < centerLineValue}\n      />\n    );\n    const midlineFontSize = `clamp(0.75rem, ${chartHeight * 0.025}px, 0.875rem)`;\n    if (d && d.value >= centerLineValue && (!orderedData[i + 1] || orderedData[i + 1].value < centerLineValue)) {\n      rows.push(\n        <BufferRow\n          key={'vertical-bar-chart-midline'}\n          style={{height: rowHeight, visibility: chartWidth ? undefined : 'hidden'}}\n        >\n          <Midline style={{height: rowHeight / 2}}>\n            <Cell\n              style={{\n                height: rowHeight,\n                width: `calc(${textWidth}px + 0.75rem)`,\n                backgroundColor: '#fff',\n              }}\n            />\n            <MidlineOverText\n              $dynamicFont={midlineFontSize}\n            >\n              {overMideLineLabel} ↑\n            </MidlineOverText>\n            <MidlineUnderText\n              $dynamicFont={midlineFontSize}\n            >\n              {underMideLineLabel} ↓\n            </MidlineUnderText>\n          </Midline>\n          <Cell\n            style={{\n              height: rowHeight,\n              width: `calc(${textWidth}px + 0.75rem)`,\n              borderRight: 'solid 1px #333',\n            }}\n          />\n        </BufferRow>\n      );\n    } else if (d && d.value < centerLineValue && i === 0) {\n      rows.unshift(\n        <BufferRow\n          key={'vertical-bar-chart-midline'}\n          style={{height: rowHeight, visibility: chartWidth ? undefined : 'hidden'}}\n        >\n          <Midline style={{height: rowHeight / 2}}>\n            <Cell\n              style={{\n                height: rowHeight,\n                width: `calc(${textWidth}px + 0.75rem)`,\n                backgroundColor: '#fff',\n              }}\n            />\n            <MidlineOverText\n              $dynamicFont={midlineFontSize}\n            >\n              {overMideLineLabel} ↑\n            </MidlineOverText>\n            <MidlineUnderText\n              $dynamicFont={midlineFontSize}\n            >\n              {underMideLineLabel} ↓\n            </MidlineUnderText>\n          </Midline>\n          <Cell\n            style={{\n              height: rowHeight,\n              width: `calc(${textWidth}px + 0.75rem)`,\n              borderRight: 'solid 1px #333',\n            }}\n          />\n        </BufferRow>\n      );\n\n    }\n  })\n\n  const remainingSpace = totalTopValues - rows.length;\n  if (remainingSpace > 0) {\n    for (let i = 0; i < remainingSpace - 1; i++) {\n      const d = {\n        id: 'empty-row-buffer-' + i,\n        title: '',\n        value: 0,\n        color: 'transparent',\n      }\n      rows.push(\n        <Row\n          key={d.id}\n          d={d}\n          rowHeight={rowHeight}\n          gridHeight={gridHeight}\n          max={maxValue}\n          onRowHover={undefined}\n          highlighted={undefined}\n          textWidth={textWidth}\n          chartWidth={chartWidth}\n          centerLineValue={centerLineValue}\n          lessThan1={true}\n        />\n      );\n    }\n  }\n\n  const axisTitle = axisLabel ? (\n    <AxisTitle\n      style={{\n        width: chartWidth,\n        right: 0,\n        textAlign: 'right',\n      }}\n      className={'react-comparison-bar-chart-axis-title'}\n    >\n      {axisLabel}\n    </AxisTitle>\n  ) : null;\n\n\n  const buffer: React.CSSProperties = {paddingRight: overflowPadding + 'rem', marginRight: scrollWidth};\n\n  const scrollDown = rows.length > 39 ? (\n    <ScrollDownText\n      style={{visibility: chartWidth ? undefined : 'hidden',}}\n      $dynamicFont={`clamp(0.65rem, ${chartWidth * 0.02}px, 0.75rem)`}\n    >\n      <ScrollDownArrow>↓</ScrollDownArrow>\n      {scrollDownText}\n    </ScrollDownText>\n  ) : null;\n\n  return (\n    <Container\n      style={{...buffer}}\n      className={'react-comparison-bar-chart-root-container'}\n    >\n      <TitleRoot\n        style={{\n          width: chartWidth,\n          visibility: chartWidth ? undefined : 'hidden',\n          marginLeft: undefined,\n          right: 0,\n          left: undefined,\n          ...buffer,\n        }}\n        $dynamicFont={`clamp(0.65rem, ${chartWidth * 0.02}px, 0.875rem)`}\n      >\n        <AxisLines style={{height: gridHeight}}>\n          {axisLines}\n        </AxisLines>\n      </TitleRoot>\n      <ChartContainer>\n        <Grid\n          ref={rootRef}\n          style={{\n            gridTemplateRows: 'repeat(${totalValues}, auto)',\n            gridTemplateColumns: 'clamp(120px, 300px, 29%) 0.75rem 1fr',\n          }}\n          className={'react-comparison-bar-chart-grid'}\n        >\n          <Cell\n            ref={textRef}\n          />\n          <Cell />\n          <Cell\n            ref={chartRef}\n          />\n          <ChartBlock>\n            <BufferRow style={{height: rowHeight, position: 'sticky', top: '0', background: '#fff'}} />\n            {rows}\n          </ChartBlock>\n          {scrollDown}\n        </Grid>\n      </ChartContainer>\n\n      <ChartOverlayContainer\n        style={{\n          width: chartWidth,\n          visibility: chartWidth ? undefined : 'hidden',\n          marginLeft: undefined,\n          right: 0,\n          left: undefined,\n          ...buffer,\n        }}\n      >\n        <AxisLines style={{height: gridHeight, width: chartWidth}}>\n          {axisTitle}\n          <CenterLine style={{left: centerLineValue + '%'}}>\n            <CenterLineLabel\n              $dynamicFont={`clamp(0.5rem, ${chartWidth * 0.023}px, 0.875rem)`}\n              className={'react-comparison-bar-chart-axis-title'}\n            >\n              <CenterLineBackground>{centerLineLabel}</CenterLineBackground>\n            </CenterLineLabel>\n          </CenterLine>\n        </AxisLines>\n      </ChartOverlayContainer>\n    </Container>\n  );\n}\n\nexport default Root;\n","import React from 'react'\nimport Root, {\n  Props as VerticalBarChartProps,\n} from './components/Root';\nimport {\n  BarDatum,\n  RowHoverEvent,\n} from './components/Utils';\n\nconst VerticalBarChart = (props: VerticalBarChartProps) => {\n  return (\n    <Root {...props} />\n  );\n}\n\nexport {\n  VerticalBarChartProps,\n  BarDatum,\n  RowHoverEvent,\n}\n\nexport default VerticalBarChart;\n","import styled from 'styled-components/macro';\n\ninterface Input {\n  title: string;\n  color: string;\n  rows: string[][];\n  boldColumns?: number[];\n}\n\nexport const RapidTooltipRoot = styled.div`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  transition: opacity 0.15s ease;\n  color: #333;\n  background-color: #fff;\n  border: 1px solid #dfdfdf;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n  transform: translate(-50%, calc(-100% - 1.5rem));\n  display: none;\n`;\n\nexport const getStandardTooltip = (input: Input) => {\n  const columnCount = input.rows.length && input.rows[0].length ? input.rows[0].length : 1;\n\n  let rows: string = '';\n  input.rows.forEach(r => {\n    let row = '';\n    r.forEach((c, i) => {\n      const alignment = i === 0\n        ? 'justify-content: flex-start; text-align: left;'\n        : 'justify-content: flex-end; text-align: right;';\n      const style = input.boldColumns && input.boldColumns.includes(i)\n        ? `style=\"font-weight: 600;${alignment}\"` : '';\n      row = row + `<div class=\"rapid-tooltip-cell\" ${style}>${c}</div>`;\n    });\n    rows = rows + row;\n  });\n\n  return `\n    <div>\n      <div class=\"rapid-tooltip-title\" style=\"background-color: ${input.color};\">\n        ${input.title}\n      </div>\n      <div\n        class=\"rapid-tooltip-subsection-grid\"\n        style=\"display: grid; grid-template-columns: repeat(${columnCount}, auto);\"\n      >\n        ${rows}\n      </div>\n    </div>\n    <div class=\"rapid-tooltip-arrow-container\">\n      <div class=\"rapid-tooltip-arrow\"></div>\n    </div>\n  `;\n};","import React, {useRef} from 'react';\nimport ComparisonBarChart, {\n  BarDatum,\n  RowHoverEvent,\n} from 'react-vertical-bar-chart';\nimport styled from 'styled-components/macro';\nimport {rgba} from 'polished';\nimport {RapidTooltipRoot, getStandardTooltip} from './rapidTooltip';\nimport RCA_DATA from '../data/boston-6-digit-rca.json';\nimport NAICS_DATA from '../data/naics_2017.json';\nimport {scaleLog} from 'd3-scale';\n\nconst tickMarksForMinMax = (min: number, max: number) => {\n  const digits = min.toString().length + max.toString().length;\n  return digits - 3;\n}\n\nconst filteredRCA = RCA_DATA.data.cityIndustryYearList.filter((d) => d.rcaNumCompany && d.rcaNumCompany > 0);\nlet max = Math.ceil((Math.max(...filteredRCA.map(d => d.rcaNumCompany as number)) * 1.1) / 10) * 10;\nlet min = Math.min(...filteredRCA.map(d => d.rcaNumCompany as number));\nif (max < 10) {\n  max = 10;\n}\nif (min >= 1) {\n  min = 0.1;\n}\n\nlet scale = scaleLog()\n  .domain([min, max])\n  .range([ 0, 100 ])\n  .nice();\n\n\nmin = parseFloat(scale.invert(0).toFixed(5));\nmax = parseFloat(scale.invert(100).toFixed(5));\n\nif (max.toString().length > min.toString().length - 1) {\n  min = 1 / max;\n} else if (max.toString().length < min.toString().length - 1) {\n  max = 1 / min;\n}\n\nscale = scaleLog()\n  .domain([min, max])\n  .range([ 0, 100 ])\n  .nice();\n\nconst numberOfXAxisTicks = tickMarksForMinMax(\n  parseFloat(scale.invert(0).toFixed(5)),\n  parseFloat(scale.invert(100).toFixed(5))\n);\n\nconst data: BarDatum[] = filteredRCA.map(d => {\n  const industry = NAICS_DATA.find(n => n.naics_id.toString() === d.naicsId);\n  return {\n    id: d.naicsId,\n    title: industry ? industry.name : '',\n    value: scale(d.rcaNumCompany) as number,\n    color: 'gray',\n  }\n});\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n  box-sizing: border-box;\n  padding: 3rem;\n\n  @media (max-width: 720px) {\n    padding: 0.75rem;\n  }\n`;\n\nfunction gcd(a: number, b: number): number {\n  return (b) ? gcd(b, a % b) : a;\n}\n\nconst decimalToFraction = function (decimal: number) {\n  let top: number | string    = decimal.toString().replace(/\\d+[.]/, '');\n  const bottom: number  = Math.pow(10, top.length);\n  if (decimal > 1) {\n    top  = +top + Math.floor(decimal) * bottom;\n  }\n  const x = gcd(top as number, bottom);\n  return {\n    top    : (top as number / x),\n    bottom  : (bottom / x),\n    display  : (top as number / x) + ':' + (bottom / x)\n  };\n};\n\n\nconst formatValue = (value: number) => {\n  const scaledValue = parseFloat(scale.invert(value).toFixed(4));\n  if (scaledValue >= 1) {\n    return scaledValue + '×';\n  } else {\n    const {top, bottom} = decimalToFraction(scaledValue);\n    return <><sup>{top}</sup>&frasl;<sub>{bottom}</sub>×</>;\n  }\n}\n\nconst BostonNewYork6Digit = () => {\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const [highlighted, setHighlighted] = React.useState<string | undefined>(undefined);\n\n  const setHovered = (e: RowHoverEvent | undefined) => {\n    const node = tooltipRef.current;\n    if (node) {\n      if (e && e.datum) {\n        const {datum, mouseCoords} = e;\n        node.innerHTML = getStandardTooltip({\n          title: datum.title,\n          color: rgba(datum.color, 0.3),\n          rows: [\n            ['RCA', scale.invert(datum.value).toFixed(3)],\n          ],\n          boldColumns: [1, 2],\n        });\n        node.style.top = mouseCoords.y + 'px';\n        node.style.left = mouseCoords.x + 'px';\n        node.style.display = 'block';\n      } else {\n        node.style.display = 'none';\n      }\n    }\n  };\n\n  return (\n    <>\n      <button onClick={() => setHighlighted(c => !c ? '2003' : undefined)}>highlight</button>\n      <Root>\n        <ComparisonBarChart\n          data={data}\n          highlighted={highlighted}\n          formatValue={formatValue}\n          axisLabel={'Specialization'}\n          onRowHover={e => setHovered(e)}\n          numberOfXAxisTicks={numberOfXAxisTicks}\n          centerLineValue={scale(1) as number}\n          centerLineLabel={'Expected Specialization'}\n          overMideLineLabel={'Over Specialized'}\n          underMideLineLabel={'Under Specialized'}\n          scrollDownText={'Scroll down to see under specialization'}\n        />\n        <RapidTooltipRoot ref={tooltipRef} />\n      </Root>\n    </>\n  )\n}\n\nexport default BostonNewYork6Digit;\n","import React from 'react';\nimport Boston6DigitRCA from './components/Boston6DigitRCA';\nimport {\n  Route,\n  Switch,\n  HashRouter,\n} from 'react-router-dom';\n\nconst App = () => {\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route component={Boston6DigitRCA} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}